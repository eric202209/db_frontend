{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{Chart as ChartJS,LinearScale}from'chart.js';ChartJS.register(LinearScale);import Chart from'./Chart';import DataTable from'./DataTable';import FilterPanel from'./FilterPanel';import ComparisonView from'./ComparisonView';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const[data,setData]=useState({avgConsMake:[],topEfficient:[],fuelTypeDist:[],co2ByClass:[],bestSmog:[],consByTrans:[],co2RatingPct:[],topLowCo2:[]});const[filter,setFilter]=useState({});const[selectedChart,setSelectedChart]=useState('avgConsMake');const[comparisonItems,setComparisonItems]=useState([]);useEffect(()=>{fetchData();},[filter]);const fetchData=async()=>{try{const response=await axios.get('/api/data',{params:filter});setData(response.data);}catch(error){console.error('Error fetching data:',error);}};const chartTitles={avgConsMake:\"Average Consumption by Make\",co2ByClass:\"CO2 Emissions by Vehicle Class\",fuelTypeDist:\"Fuel Type Distribution\",bestSmog:\"Best Smog Ratings\",consByTrans:\"Consumption by Transmission\",co2RatingPct:\"CO2 Rating Percentages\",topLowCo2:\"Top Low CO2 Emitters\"};const handleComparisonToggle=item=>{setComparisonItems(prevItems=>prevItems.includes(item)?prevItems.filter(i=>i!==item):[...prevItems,item]);};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsx(FilterPanel,{onFilterChange:setFilter}),/*#__PURE__*/_jsx(\"select\",{onChange:e=>setSelectedChart(e.target.value),children:Object.entries(chartTitles).map(_ref=>{let[key,value]=_ref;return/*#__PURE__*/_jsx(\"option\",{value:key,children:value},key);})}),/*#__PURE__*/_jsx(Chart,{data:data[selectedChart],title:chartTitles[selectedChart]}),/*#__PURE__*/_jsx(DataTable,{data:data.topEfficient,title:\"Top Efficient Vehicles\",onComparisonToggle:handleComparisonToggle}),comparisonItems.length>0&&/*#__PURE__*/_jsx(ComparisonView,{items:comparisonItems})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","ChartJS","LinearScale","register","DataTable","FilterPanel","ComparisonView","jsx","_jsx","jsxs","_jsxs","Dashboard","data","setData","avgConsMake","topEfficient","fuelTypeDist","co2ByClass","bestSmog","consByTrans","co2RatingPct","topLowCo2","filter","setFilter","selectedChart","setSelectedChart","comparisonItems","setComparisonItems","fetchData","response","get","params","error","console","chartTitles","handleComparisonToggle","item","prevItems","includes","i","className","children","onFilterChange","onChange","e","target","value","Object","entries","map","_ref","key","title","onComparisonToggle","length","items"],"sources":["D:/centennial/centennial 2024 summer/comp214/Assignment/group project/db_frontend/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Chart as ChartJS, LinearScale } from 'chart.js';\r\nChartJS.register(LinearScale);\r\nimport Chart from './Chart';\r\nimport DataTable from './DataTable';\r\nimport FilterPanel from './FilterPanel';\r\nimport ComparisonView from './ComparisonView';\r\n\r\nconst Dashboard = () => {\r\n    const [data, setData] = useState({\r\n        avgConsMake: [],\r\n        topEfficient: [],\r\n        fuelTypeDist: [],\r\n        co2ByClass: [],\r\n        bestSmog: [],\r\n        consByTrans: [],\r\n        co2RatingPct: [],\r\n        topLowCo2: []\r\n    });\r\n    const [filter, setFilter] = useState({});\r\n    const [selectedChart, setSelectedChart] = useState('avgConsMake');\r\n    const [comparisonItems, setComparisonItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [filter]);\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await axios.get('/api/data', { params: filter });\r\n            setData(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n    };\r\n\r\n    const chartTitles = {\r\n        avgConsMake: \"Average Consumption by Make\",\r\n        co2ByClass: \"CO2 Emissions by Vehicle Class\",\r\n        fuelTypeDist: \"Fuel Type Distribution\",\r\n        bestSmog: \"Best Smog Ratings\",\r\n        consByTrans: \"Consumption by Transmission\",\r\n        co2RatingPct: \"CO2 Rating Percentages\",\r\n        topLowCo2: \"Top Low CO2 Emitters\"\r\n    };\r\n\r\n    const handleComparisonToggle = (item) => {\r\n        setComparisonItems(prevItems => \r\n            prevItems.includes(item)\r\n                ? prevItems.filter(i => i !== item)\r\n                : [...prevItems, item]\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <FilterPanel onFilterChange={setFilter} />\r\n            <select onChange={(e) => setSelectedChart(e.target.value)}>\r\n                {Object.entries(chartTitles).map(([key, value]) => (\r\n                    <option key={key} value={key}>{value}</option>\r\n                ))}\r\n            </select>\r\n            <Chart data={data[selectedChart]} title={chartTitles[selectedChart]} />\r\n            <DataTable\r\n                data={data.topEfficient}\r\n                title=\"Top Efficient Vehicles\"\r\n                onComparisonToggle={handleComparisonToggle}\r\n            />\r\n            {comparisonItems.length > 0 && <ComparisonView items={comparisonItems} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}