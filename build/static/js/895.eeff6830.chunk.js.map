{"version":3,"file":"static/js/895.eeff6830.chunk.js","mappings":"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","sources":["../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx","Chart.js"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props as ChartProps;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n","import React, { useState } from 'react';\r\nimport { Bar, Pie, Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, ArcElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\r\nChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, ArcElement, PointElement, Title, Tooltip, Legend);\r\n\r\nconst Chart = ({ data = [], title, type }) => {\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n    if (!data || data.length === 0) {\r\n        return <div>No data available for this chart.</div>;\r\n    }\r\n\r\n    console.log('Chart data:', data);\r\n\r\n    const chartData = {\r\n      labels: data.map(item => item.MAKE || item.VEHICLE_CLASS || item.FUEL_TYPE || item.TRANSMISSION || item.CO2_RATING || ''),\r\n      datasets: [\r\n        {\r\n          label: title,\r\n          data: data.map(item => item.AVG_CONS || item.COMB_CONS || item.COUNT || item.AVG_CO2 || item.PERCENTAGE || 0),\r\n          backgroundColor: 'rgba(75,192,192,0.6)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderWidth: 1,\r\n          hoverBackgroundColor: 'rgba(75,192,192,0.4)',\r\n          hoverBorderColor: 'rgba(75,192,192,1)'\r\n        }\r\n      ]\r\n    };\r\n    console.log('Processed chart data:', chartData);\r\n\r\n    const chartOptions = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        },\r\n        onClick: (event, elements) => {\r\n          if (elements.length > 0) {\r\n            const index = elements[0].index;\r\n            setSelectedItem(data[index]);\r\n          }\r\n        },\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: title,\r\n          },\r\n        },\r\n      };\r\n\r\n    let ChartComponent;\r\n    switch(type) {\r\n        case 'fuelTypeDist':\r\n        case 'co2RatingPct':\r\n        case 'topEfficient':\r\n            ChartComponent = Pie;\r\n            break;\r\n        case 'consByTrans':\r\n        case 'co2ByClass':\r\n        case 'avgConsMake':\r\n        case 'bestSmog':\r\n        case 'topLowCo2':\r\n            ChartComponent = Line;\r\n            break;\r\n        default:\r\n            ChartComponent = Bar;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"chart\">\r\n        <h2>{title}</h2>\r\n        <ChartComponent data={chartData} options={chartOptions} />\r\n        {selectedItem && (\r\n          <div className=\"detail-view\">\r\n            <h3>{selectedItem.make || selectedItem.vehClass || selectedItem.fuelType || selectedItem.trans || selectedItem.co2Rating}</h3>          \r\n            <p>Value: {selectedItem.avgCons || selectedItem.combCons || selectedItem.count || selectedItem.avgCo2 || selectedItem.percentage}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Chart;"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","arguments","length","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","ChartComponent","props","height","width","redraw","type","options","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","useEffect","chart","nextOptions","setOptions","config","setTimeout","update","React","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Pie","PieController","ChartJS","CategoryScale","LinearScale","BarElement","LineElement","ArcElement","PointElement","Title","Tooltip","Legend","_ref","title","selectedItem","setSelectedItem","useState","_jsx","children","console","log","chartData","item","MAKE","VEHICLE_CLASS","FUEL_TYPE","TRANSMISSION","CO2_RATING","label","AVG_CONS","COMB_CONS","COUNT","AVG_CO2","PERCENTAGE","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","chartOptions","scales","y","beginAtZero","onClick","event","elements","index","responsive","legend","position","display","text","_jsxs","className","make","vehClass","fuelType","trans","co2Rating","avgCons","combCons","count","avgCo2","percentage"],"sourceRoot":""}