{"version":3,"file":"static/js/260.0a4aa971.chunk.js","mappings":"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","sources":["Chart.js","ComparisonView.js","Dashboard.js","DataTable.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Bar, Pie, Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement,\r\n  PointElement,\r\n  LineElement\r\n} from 'chart.js';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement,\r\n  PointElement,\r\n  LineElement,\r\n  zoomPlugin\r\n);\r\n\r\nconst Chart = ({ data = [], title, type }) => {\r\n  if (!data || data.length === 0) {\r\n    return <div>No data available for this chart.</div>;\r\n  }\r\n\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n  const chartData = {\r\n    labels: Array.isArray(data) ? data.map(item => item.make || item.vehClass || item.fuelType || item.trans || item.co2Rating || '') : [],\r\n    datasets: [\r\n      {\r\n        label: title,\r\n        data: Array.isArray(data) ? data.map(item => item.avgCons || item.combCons || item.count || item.avgCo2 || item.percentage || 0) : [],\r\n        backgroundColor: 'rgba(75,192,192,0.6)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'rgba(75,192,192,0.4)',\r\n        hoverBorderColor: 'rgba(75,192,192,1)'\r\n      }\r\n    ]\r\n  };\r\n\r\n  const chartOptions = {\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true\r\n      }\r\n    },\r\n    onClick: (event, elements) => {\r\n      if (elements.length > 0) {\r\n        const index = elements[0].index;\r\n        setSelectedItem(data[index]);\r\n      }\r\n    },\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: title,\r\n      },\r\n      zoom: {\r\n        zoom: {\r\n          wheel: {\r\n            enabled: true,\r\n          },\r\n          pinch: {\r\n            enabled: true\r\n          },\r\n          mode: 'xy',\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context) {\r\n            let label = context.dataset.label || '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            if (context.parsed.y !== null) {\r\n              label += new Intl.NumberFormat('en-US', { style: 'decimal' }).format(context.parsed.y);\r\n            }\r\n            return label;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  let ChartComponent;\r\n  switch(type) {\r\n    case 'fuelTypeDist':\r\n    case 'co2RatingPct':\r\n      ChartComponent = Pie;\r\n      break;\r\n    case 'consByTrans':\r\n    case 'co2ByClass':\r\n      ChartComponent = Line;\r\n      break;\r\n    default:\r\n      ChartComponent = Bar;\r\n  }\r\n\r\n  return (    \r\n    <div className=\"chart\">\r\n      <h2>{title}</h2>\r\n      <ChartComponent data={chartData} options={chartOptions} />\r\n      {selectedItem && (\r\n        <div className=\"detail-view\">\r\n          <h3>{selectedItem.make || selectedItem.vehClass || selectedItem.fuelType || selectedItem.trans || selectedItem.co2Rating}</h3>          \r\n          <p>Value: {selectedItem.avgCons || selectedItem.combCons || selectedItem.count || selectedItem.avgCo2 || selectedItem.percentage}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\n\r\nconst ComparisonView = ({ items }) => {\r\n    return (\r\n        <div className=\"comparison-view\">\r\n        <h2>Comparison</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Make</th>\r\n              <th>Model</th>\r\n              <th>Fuel Consumption</th>\r\n              <th>CO2 Emissions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {items.map((item, index) => (\r\n              <tr key={index}>\r\n                <td>{item.make}</td>\r\n                <td>{item.model}</td>\r\n                <td>{item.fuelConsumption}</td>\r\n                <td>{item.co2Emissions}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default ComparisonView;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Chart as ChartJS, ArcElement, LinearScale } from 'chart.js';\r\nChartJS.register(LinearScale, ArcElement);\r\nimport Chart from './Chart';\r\nimport DataTable from './DataTable';\r\nimport FilterPanel from './FilterPanel';\r\nimport ComparisonView from './ComparisonView';\r\n\r\nconst Dashboard = () => {\r\n    const [data, setData] = useState({\r\n        avgConsMake: [],\r\n        topEfficient: [],\r\n        fuelTypeDist: [],\r\n        co2ByClass: [],\r\n        bestSmog: [],\r\n        consByTrans: [],\r\n        co2RatingPct: [],\r\n        topLowCo2: []\r\n    });\r\n    const [filter, setFilter] = useState({});\r\n    const [selectedChart, setSelectedChart] = useState('avgConsMake');\r\n    const [comparisonItems, setComparisonItems] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [filter]);\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const fetchData = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await axios.get('/api/data', { params: filter });\r\n            // setData(response.data);\r\n            console.log('Fetched data:', response.data); // Log response data\r\n\r\n            // Parse the response data\r\n            const parsedData = {\r\n                avgConsMake: response.data.avgConsMake.map(item => ({ make: item.MAKE, avgCons: item.AVG_CONS })),\r\n                topEfficient: response.data.topEfficient.map(item => ({ make: item.MAKE, model: item.MODEL, combCons: item.COMB_CONS })),\r\n                fuelTypeDist: response.data.fuelTypeDist.map(item => ({ fuelType: item.FUEL_TYPE, count: item.COUNT_FT })),\r\n                co2ByClass: response.data.co2ByClass.map(item => ({ vehClass: item.VEH_CLASS, avgCo2: item.AVG_CO2 })),\r\n                bestSmog: response.data.bestSmog.map(item => ({ make: item.MAKE, model: item.MODEL, smogRating: item.SMOG_RATING })),\r\n                consByTrans: response.data.consByTrans.map(item => ({ trans: item.TRANS, avgCons: item.AVG_CONS })),\r\n                co2RatingPct: response.data.co2RatingPct.map(item => ({ co2Rating: item.CO2_RATING, count: item.COUNT_CR, percentage: item.PERCENTAGE })),\r\n                topLowCo2: response.data.topLowCo2.map(item => ({ make: item.MAKE, avgCo2: item.AVG_CO2 }))\r\n            };            \r\n            setData(parsedData);\r\n        } catch (error) {\r\n            setError('Failed to fetch data. Please try again.');\r\n            console.error('Error fetching data:', error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const chartTitles = {\r\n        avgConsMake: \"Average Consumption by Make\",\r\n        co2ByClass: \"CO2 Emissions by Vehicle Class\",\r\n        fuelTypeDist: \"Fuel Type Distribution\",\r\n        bestSmog: \"Best Smog Ratings\",\r\n        consByTrans: \"Consumption by Transmission\",\r\n        co2RatingPct: \"CO2 Rating Percentages\",\r\n        topLowCo2: \"Top Low CO2 Emitters\"\r\n    };\r\n\r\n    const handleComparisonToggle = (item) => {\r\n        setComparisonItems(prevItems => \r\n            prevItems.includes(item)\r\n                ? prevItems.filter(i => i !== item)\r\n                : [...prevItems, item]\r\n        );\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            {isLoading && <div className=\"loading-indicator\">Loading...</div>}\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            <button onClick={fetchData}>Refresh Data</button>\r\n            \r\n            <FilterPanel onFilterChange={setFilter} />\r\n            <select onChange={(e) => setSelectedChart(e.target.value)}>\r\n                {Object.entries(chartTitles).map(([key, value]) => (\r\n                    <option key={key} value={key}>{value}</option>\r\n                ))}\r\n            </select>\r\n            {data[selectedChart] && data[selectedChart].length > 0 ? (\r\n                <Chart data={data[selectedChart]} title={chartTitles[selectedChart]} type={selectedChart} />\r\n            ) : (\r\n                <div>No data available for the selected chart.</div>\r\n            )}\r\n            <div className=\"top-efficient\">\r\n                <h2>Top Efficient Vehicles</h2>\r\n                {data.topEfficient && data.topEfficient.length > 0 ? (\r\n                    <DataTable\r\n                        data={data.topEfficient}\r\n                        onComparisonToggle={handleComparisonToggle}\r\n                    />\r\n                ) : (\r\n                    <p className=\"no-data-message\">No data available for top efficient vehicles.</p>\r\n                )}\r\n            </div>\r\n            {comparisonItems.length > 0 && <ComparisonView items={comparisonItems} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React, { useState } from 'react';\r\n\r\nconst DataTable = ({ data, title, onComparisonToggle }) => {\r\n    const [sortConfig, setSortConfig] = useState(null);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const sortedItems = React.useMemo(() => {\r\n        let sortableItems = [...data];\r\n        if (sortConfig !== null) {\r\n            sortableItems.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return sortableItems;\r\n    }, [data, sortConfig]);\r\n\r\n    const requestSort = (key) => {\r\n        let direction = 'ascending';\r\n        if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n            direction = 'descending';\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    const filteredItems = sortedItems.filter(item =>\r\n        Object.values(item).some(val => \r\n            val.toString().toLowerCase().includes(searchTerm.toLowerCase())\r\n        )\r\n    );\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 10;\r\n\r\n    const indexOfLastItem = currentPage * itemsPerPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n    return (\r\n        <div className=\"datatable\">\r\n            <h2>{title}</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Search table...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n            />\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th onClick={() => requestSort('make')}>Make</th>\r\n                        <th onClick={() => requestSort('model')}>Model</th>\r\n                        <th onClick={() => requestSort('combined_consumption')}>Combined Consumption</th>\r\n                        <th onClick={() => requestSort('co2_emissions')}>CO2 Emissions</th>\r\n                        <th onClick={() => requestSort('compare')}>Compare</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Array.isArray(currentItems) && currentItems.map((vehicle, index) => (\r\n                        <tr key={index}>\r\n                            <td>{vehicle.make || ''}</td>\r\n                            <td>{vehicle.model || ''}</td>\r\n                            <td>{vehicle.combined_consumption || ''}</td>\r\n                            <td>{vehicle.co2_emissions || ''}</td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    onChange={() => onComparisonToggle(vehicle)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            <Pagination\r\n                itemsPerPage={itemsPerPage}\r\n                totalItems={data.length}\r\n                paginate={paginate}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Pagination = ({ itemsPerPage, totalItems, paginate }) => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                {pageNumbers.map(number => (\r\n                    <li key={number} className=\"page-item\">\r\n                        <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default DataTable;"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","ArcElement","PointElement","LineElement","zoomPlugin","_ref","data","title","type","length","_jsx","children","selectedItem","setSelectedItem","useState","chartData","labels","Array","isArray","map","item","make","vehClass","fuelType","trans","co2Rating","datasets","label","avgCons","combCons","count","avgCo2","percentage","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","chartOptions","scales","y","beginAtZero","onClick","event","elements","index","responsive","plugins","legend","position","display","text","zoom","wheel","enabled","pinch","mode","tooltip","callbacks","context","dataset","parsed","Intl","NumberFormat","style","format","ChartComponent","Pie","Line","Bar","_jsxs","className","options","items","model","fuelConsumption","co2Emissions","Dashboard","setData","avgConsMake","topEfficient","fuelTypeDist","co2ByClass","bestSmog","consByTrans","co2RatingPct","topLowCo2","filter","setFilter","selectedChart","setSelectedChart","comparisonItems","setComparisonItems","loading","setLoading","error","setError","useEffect","fetchData","isLoading","setIsLoading","async","response","axios","get","params","console","log","parsedData","MAKE","AVG_CONS","MODEL","COMB_CONS","FUEL_TYPE","COUNT_FT","VEH_CLASS","AVG_CO2","smogRating","SMOG_RATING","TRANS","CO2_RATING","COUNT_CR","PERCENTAGE","chartTitles","FilterPanel","onFilterChange","onChange","e","target","value","Object","entries","key","Chart","DataTable","onComparisonToggle","prevItems","includes","i","ComparisonView","Pagination","_ref2","itemsPerPage","totalItems","paginate","pageNumbers","Math","ceil","push","number","href","sortConfig","setSortConfig","searchTerm","setSearchTerm","sortedItems","React","sortableItems","sort","a","b","direction","requestSort","currentPage","setCurrentPage","values","some","val","toString","toLowerCase","indexOfLastItem","indexOfFirstItem","currentItems","slice","placeholder","vehicle","combined_consumption","co2_emissions","pageNumber"],"sourceRoot":""}