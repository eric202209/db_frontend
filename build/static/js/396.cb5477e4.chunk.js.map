{"version":3,"file":"static/js/396.cb5477e4.chunk.js","mappings":"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","sources":["AnalysisResults.js","Chart.js","DataTable.js"],"sourcesContent":["import React from 'react';\r\nimport Chart from './Chart';\r\nimport DataTable from './DataTable';\r\n\r\nconst AnalysisResults = ({ data, comparisonData }) => {\r\n    const chartConfigs = [\r\n        { key: 'avgConsMake', title: \"Average Consumption\", type: 'bar' },\r\n        { key: 'co2ByClass', title: \"CO2 Emissions by Vehicle Class\", type: 'bar' },\r\n        { key: 'fuelTypeDist', title: \"Fuel Type Distribution\", type: 'pie' },\r\n        { key: 'bestSmog', title: \"Best Smog Ratings\", type: 'line' },\r\n        { key: 'consByTrans', title: \"Consumption by Transmission\", type: 'bar' },\r\n        { key: 'co2RatingPct', title: \"CO2 Rating Percentages\", type: 'pie' },\r\n        { key: 'topLowCo2', title: \"Top Low CO2 Emitters\", type: 'bar' },\r\n        { key: 'topEfficient', title: \"Top Efficient Vehicles\", type: 'line' }\r\n    ];\r\n\r\n    const formatChartData = (rawData, key, isComparison) => {\r\n        console.log(`Formatting chart data for ${key}:`, rawData);\r\n\r\n        if (!rawData || (Array.isArray(rawData) && rawData.length === 0)) {\r\n          console.warn(`No data available for ${key}`);\r\n          return [];\r\n        }\r\n\r\n        const processData = (data) => {\r\n            const dataArray = Array.isArray(data) ? data : [data];\r\n       \r\n        switch (key) {\r\n            case 'avgConsMake':\r\n                return dataArray.map(item => ({\r\n                    label: item.MAKE,\r\n                    value: parseFloat(item.COMBINED_CONSUMPTION)\r\n                }));\r\n            case 'co2ByClass':\r\n                return dataArray.map(item => ({\r\n                    label: item.VEHICLE_CLASS,\r\n                    value: parseFloat(item.CO2_EMISSIONS)\r\n                }));\r\n            case 'fuelTypeDist':\r\n                // Count occurrences of each fuel type\r\n                const fuelTypeCounts = dataArray.reduce((acc, item) => {\r\n                    acc[item.FUEL_TYPE] = (acc[item.FUEL_TYPE] || 0) + 1;\r\n                    return acc;\r\n                }, {});\r\n                return Object.entries(fuelTypeCounts).map(([fuelType, count]) => ({\r\n                    label: fuelType,\r\n                    value: count\r\n                }));\r\n            case 'bestSmog':\r\n                return dataArray.map(item => ({\r\n                    label: `${item.MAKE} ${item.MODEL}`,\r\n                    value: parseFloat(item.SMOG_RATING)\r\n                }));\r\n            case 'consByTrans':\r\n                return dataArray.map(item => ({\r\n                    label: item.TRANSMISSION,\r\n                    value: parseFloat(item.COMBINED_CONSUMPTION)\r\n                }));\r\n            case 'co2RatingPct':\r\n                const co2Ratings = dataArray.reduce((acc, item) => {\r\n                    const rating = item.co2_rating || 'Unknown';\r\n                    acc[rating] = (acc[rating] || 0) + 1;\r\n                    return acc;\r\n                }, {});\r\n                const total = Object.values(co2Ratings).reduce((sum, count) => sum + count, 0);\r\n                    return Object.entries(co2Ratings).map(([rating, count]) => ({\r\n                        label: rating.toString(),\r\n                        value: (count / total) * 100\r\n                    }));\r\n            case 'topLowCo2':\r\n                const makeGroups = dataArray.reduce((acc, item) => {\r\n                    const make = item.make || 'Unknown';\r\n                    if (!acc[make]) acc[make] = [];\r\n                    acc[make].push(parseFloat(item.co2_emissions) || 0);\r\n                    return acc;\r\n                }, {});\r\n                return Object.entries(makeGroups)\r\n                    .map(([make, emissions]) => ({\r\n                        label: make,\r\n                        value: emissions.reduce((sum, val) => sum + val, 0) / emissions.length\r\n                    }))\r\n                    .sort((a, b) => a.value - b.value)\r\n                    .slice(0, 10);\r\n            case 'topEfficient':\r\n                return dataArray.map(item => ({\r\n                    label: `${item.MAKE} ${item.MODEL}`,\r\n                    value: parseFloat(item.COMBINED_CONSUMPTION)\r\n                }));\r\n            default:\r\n                console.warn(`Unsupported key: ${key}`)\r\n                return [];\r\n        }\r\n    };\r\n\r\n    if (isComparison) {\r\n        return processData(rawData);\r\n        } else {\r\n            // Existing logic for overall analysis data\r\n            return rawData.map(item => {\r\n                const labels = Object.keys(item);\r\n                let labelIndex, valueIndex;\r\n    \r\n                switch (key) {\r\n                    case 'fuelTypeDist':\r\n                    case 'avgConsMake':\r\n                    case 'co2ByClass':\r\n                    case 'consByTrans':\r\n                    case 'topLowCo2':\r\n                        labelIndex = 1;\r\n                        valueIndex = 2;\r\n                        break;\r\n                    case 'bestSmog':\r\n                    case 'topEfficient':\r\n                        labelIndex = 2;\r\n                        valueIndex = 3;\r\n                        break;\r\n                    case 'co2RatingPct':\r\n                        labelIndex = 1;\r\n                        valueIndex = 3;\r\n                        break;\r\n                    default:\r\n                        return null;\r\n                }\r\n        \r\n                return {\r\n                    label: item[labels[labelIndex]],\r\n                    value: parseFloat(item[labels[valueIndex]])\r\n                };\r\n        }).filter(Boolean);\r\n      }\r\n    }\r\n      \r\n      // In the return statement\r\n    return (\r\n      <div className=\"analysis-results\">\r\n        {chartConfigs.map(({ key, title, type }) => (\r\n          <div key={key} className=\"chart-section\">\r\n            <h2>{title}</h2>\r\n            {data[key] && data[key].length > 0 ? (\r\n              <>\r\n                <Chart \r\n                  data={formatChartData(data[key], key)} \r\n                  title={title} \r\n                  type={type} \r\n                />\r\n                <DataTable data={data[key]} />\r\n              </>\r\n            ) : (\r\n              <p className=\"no-data-message\">No data available for {title}.</p>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default AnalysisResults;\r\n","import React from 'react';\r\nimport { Bar, Line, Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst getColors = (count) => {\r\n  const colors = [\r\n    'rgba(75,192,192,0.6)', 'rgba(255,99,132,0.6)', 'rgba(255,206,86,0.6)',\r\n    'rgba(54,162,235,0.6)', 'rgba(153,102,255,0.6)', 'rgba(255,159,64,0.6)'\r\n  ];\r\n  return Array(count).fill().map((_, i) => colors[i % colors.length]);\r\n};\r\n\r\nconst Chart = ({ data, type, title }) => {\r\n  console.log(`Rendering chart for ${title}:`, data);\r\n\r\n  if (!data || !Array.isArray(data) || data.length === 0) {\r\n    return <div>No data available for this chart.</div>;\r\n  }\r\n\r\n  // // Sort data for 'Top Low CO2 Vehicles' chart\r\n  // const sortedData = title === 'Top Low CO2 Vehicles' \r\n  // ? [...data].sort((a, b) => a.value - b.value).slice(0, 10)\r\n  // : data;\r\n\r\n  const labels = data.map(item => item.label || 'Undefined');\r\n  const values = data.map(item => {\r\n    const value = parseFloat(item.value);\r\n    return isNaN(value) ? 0 : value;\r\n  });\r\n\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: title,\r\n        data: values,\r\n        backgroundColor: type === 'pie' ? getColors(values.length) : getColors(1)[0],\r\n        borderColor: type === 'line' ? getColors(1)[0] : 'rgba(75,192,192,1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: { \r\n        position: 'top',\r\n        labels: {\r\n          font: {\r\n            size: 14,\r\n            weight: 'bold'\r\n          }\r\n        }\r\n      },\r\n      title: { \r\n        display: true, \r\n        text: title,\r\n        font: {\r\n          size: 18,\r\n          weight: 'bold'\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => {\r\n            let label = context.label || '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            let value;\r\n            if (type === 'pie') {\r\n              value = context.parsed;\r\n            } else {\r\n              value = context.parsed.y;\r\n            }\r\n            if (value !== null && !isNaN(value)) {\r\n              value = parseFloat(value);\r\n              if (title === 'CO2 Rating Percentages') {\r\n                label += value.toFixed(2) + '%';\r\n              } else if (title === 'Top Low CO2 Vehicles' || title === 'CO2 Emissions by Vehicle Class') {\r\n                label += value.toFixed(2) + ' g/km';\r\n              } else if (title === 'Consumption by Transmission' || title.includes('Consumption')) {\r\n                label += value.toFixed(2) + ' L/100km';\r\n              } else {\r\n                label += value.toFixed(2);\r\n              }\r\n            } else {\r\n              label += 'N/A';\r\n            }\r\n            return label;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    scales: type !== 'pie' ? {\r\n      y: {\r\n        beginAtZero: true,\r\n        ticks: {\r\n          font:{size:12},\r\n          callback: function(value) {\r\n            if (value === null || isNaN(value)) return 'N/A';\r\n            value = parseFloat(value);\r\n            if (title === 'CO2 Rating Percentages') {\r\n              return value.toFixed(2) + '%';\r\n            } else if (title === 'Top Low CO2 Vehicles' || title === 'CO2 Emissions by Vehicle Class') {\r\n              return value.toFixed(2) + ' g/km';\r\n            } else if (title === 'Consumption by Transmission' || title.includes('Consumption')) {\r\n              return value.toFixed(2) + ' L/100km';\r\n            } else {\r\n              return value.toFixed(2);\r\n            }\r\n          }\r\n        },\r\n        grid: {\r\n            color: 'rgba(0, 0, 0, 0.1)'\r\n          }\r\n        },\r\n        x: {\r\n          ticks: {\r\n            font: {\r\n              size: 12\r\n            }\r\n          },\r\n          grid: {\r\n            color: 'rgba(0, 0, 0, 0.1)'\r\n          }\r\n        }\r\n    } : {},\r\n  };\r\n\r\n  const renderChart = () => {\r\n    try {\r\n      switch (type) {\r\n        case 'bar':\r\n          return <Bar data={chartData} options={options} />;\r\n        case 'line':\r\n          return <Line data={chartData} options={options} />;\r\n        case 'pie':\r\n          return <Pie data={chartData} options={options} />;\r\n        default:\r\n          return <Bar data={chartData} options={options} />;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error rendering chart:', error);\r\n      return <div>Error rendering chart. Check console for details.</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      {renderChart()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\n\r\nconst DataTable = ({ data }) => {\r\n    if (!data || data.length === 0) return null;\r\n  \r\n    const headers = Object.keys(data[0]);\r\n  \r\n    return (\r\n      <table className=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            {headers.map(header => (\r\n              <th key={header}>{header.replace(/_/g, ' ')}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((row, index) => (\r\n            <tr key={index}>\r\n              {headers.map(header => (\r\n                <td key={header}>{row[header]}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\nexport default DataTable;"],"names":["_ref","data","comparisonData","formatChartData","rawData","key","isComparison","console","log","concat","Array","isArray","length","warn","dataArray","map","item","label","MAKE","value","parseFloat","COMBINED_CONSUMPTION","VEHICLE_CLASS","CO2_EMISSIONS","fuelTypeCounts","reduce","acc","FUEL_TYPE","Object","entries","_ref2","fuelType","count","MODEL","SMOG_RATING","TRANSMISSION","co2Ratings","rating","co2_rating","total","values","sum","_ref3","toString","makeGroups","make","push","co2_emissions","_ref4","emissions","val","sort","a","b","slice","processData","labels","keys","labelIndex","valueIndex","filter","Boolean","_jsx","className","children","title","type","_ref5","_jsxs","_Fragment","Chart","DataTable","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","getColors","colors","fill","_","i","isNaN","chartData","datasets","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","font","size","weight","display","text","tooltip","callbacks","context","parsed","y","toFixed","includes","scales","beginAtZero","ticks","callback","grid","color","x","renderChart","Bar","Line","Pie","error","headers","header","replace","row","index"],"sourceRoot":""}