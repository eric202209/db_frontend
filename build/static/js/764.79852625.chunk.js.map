{"version":3,"file":"static/js/764.79852625.chunk.js","mappings":"0KAIAA,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IAGF,MAAMC,EAAaC,IACjB,MAAMC,EAAS,CACb,uBAAwB,uBAAwB,uBAChD,uBAAwB,wBAAyB,wBAEnD,OAAOC,MAAMF,GAAOG,OAAOC,KAAI,CAACC,EAAGC,IAAML,EAAOK,EAAIL,EAAOM,SAAQ,EAoGrE,EAjGcC,IAA4B,IAA3B,KAAEC,EAAI,KAAEC,EAAI,MAAEC,GAAOH,EAGlC,GAFAI,QAAQC,IAAI,uBAADC,OAAwBH,EAAK,KAAKF,IAExCA,IAASP,MAAMa,QAAQN,IAAyB,IAAhBA,EAAKF,OACxC,OAAOS,EAAAA,EAAAA,KAAA,OAAAC,SAAK,sCAQd,MAAMC,EAAST,EAAKL,KAAIe,GAAQA,EAAKC,QAC/BC,EAASZ,EAAKL,KAAIe,GAAQA,EAAKG,QAE/BC,EAAY,CAChBL,OAAQA,EACRM,SAAU,CACR,CACEJ,MAAOT,EACPF,KAAMY,EACNI,gBAA0B,QAATf,EAAiBX,EAAUsB,EAAOd,QAAUR,EAAU,GAAG,GAC1E2B,YAAsB,SAAThB,EAAkBX,EAAU,GAAG,GAAK,qBACjD4B,YAAa,KAKbC,EAAU,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CAAEC,SAAU,OACpBrB,MAAO,CAAEsB,SAAS,EAAMC,KAAMvB,GAC9BwB,QAAS,CACPC,UAAW,CACThB,MAAQiB,IACN,IAAIjB,EAAQiB,EAAQjB,OAAS,GAW7B,OAVIA,IACFA,GAAS,MAEc,OAArBiB,EAAQC,OAAOC,IACjBnB,GAAS,IAAIoB,KAAKC,aAAa,QAAS,CACtCC,sBAAuB,EACvBC,sBAAuB,EACvBC,MAAgB,QAATlC,EAAiB,UAAY,YACnCmC,OAAgB,QAATnC,EAAiB2B,EAAQC,OAAS,IAAMD,EAAQC,SAErDlB,CAAK,KAKpB0B,OAAiB,QAATpC,EAAiB,CACvB6B,EAAG,CACDQ,aAAa,EACbC,MAAO,CACLC,SAAU,SAAS3B,GACjB,MAAc,2BAAVX,EACKW,EAAM4B,QAAQ,GAAK,IACP,yBAAVvC,GAA8C,mCAAVA,EACtCW,EAAM4B,QAAQ,GAAK,QACP,gCAAVvC,GAA2CA,EAAMwC,SAAS,eAC5D7B,EAAM4B,QAAQ,GAAK,WAEnB5B,CAEX,KAGF,CAAC,GAqBP,OACEN,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,kBAAiBnC,SAnBdoC,MAClB,IACE,OAAQ3C,GACN,IAAK,MAML,QACE,OAAOM,EAAAA,EAAAA,KAACsC,EAAAA,GAAG,CAAC7C,KAAMc,EAAWK,QAASA,IALxC,IAAK,OACH,OAAOZ,EAAAA,EAAAA,KAACuC,EAAAA,GAAI,CAAC9C,KAAMc,EAAWK,QAASA,IACzC,IAAK,MACH,OAAOZ,EAAAA,EAAAA,KAACwC,EAAAA,GAAG,CAAC/C,KAAMc,EAAWK,QAASA,IAI5C,CAAE,MAAO6B,GAEP,OADA7C,QAAQ6C,MAAM,yBAA0BA,IACjCzC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,qDACd,GAKGoC,IACG,C","sources":["Chart.js"],"sourcesContent":["import React from 'react';\r\nimport { Bar, Line, Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst getColors = (count) => {\r\n  const colors = [\r\n    'rgba(75,192,192,0.6)', 'rgba(255,99,132,0.6)', 'rgba(255,206,86,0.6)',\r\n    'rgba(54,162,235,0.6)', 'rgba(153,102,255,0.6)', 'rgba(255,159,64,0.6)'\r\n  ];\r\n  return Array(count).fill().map((_, i) => colors[i % colors.length]);\r\n};\r\n\r\nconst Chart = ({ data, type, title }) => {\r\n  console.log(`Rendering chart for ${title}:`, data);\r\n\r\n  if (!data || !Array.isArray(data) || data.length === 0) {\r\n    return <div>No data available for this chart.</div>;\r\n  }\r\n\r\n  // // Sort data for 'Top Low CO2 Vehicles' chart\r\n  // const sortedData = title === 'Top Low CO2 Vehicles' \r\n  // ? [...data].sort((a, b) => a.value - b.value).slice(0, 10)\r\n  // : data;\r\n\r\n  const labels = data.map(item => item.label);\r\n  const values = data.map(item => item.value);\r\n\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: title,\r\n        data: values,\r\n        backgroundColor: type === 'pie' ? getColors(values.length) : getColors(1)[0],\r\n        borderColor: type === 'line' ? getColors(1)[0] : 'rgba(75,192,192,1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: { position: 'top' },\r\n      title: { display: true, text: title },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => {\r\n            let label = context.label || '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            if (context.parsed.y !== null) {\r\n              label += new Intl.NumberFormat('en-US', { \r\n                minimumFractionDigits: 2, \r\n                maximumFractionDigits: 2,\r\n                style: type === 'pie' ? 'percent' : 'decimal' \r\n              }).format(type === 'pie' ? context.parsed / 100 : context.parsed);\r\n            }\r\n            return label;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    scales: type !== 'pie' ? {\r\n      y: {\r\n        beginAtZero: true,\r\n        ticks: {\r\n          callback: function(value) {\r\n            if (title === 'CO2 Rating Percentages') {\r\n              return value.toFixed(2) + '%';\r\n            } else if (title === 'Top Low CO2 Vehicles' || title === 'CO2 Emissions by Vehicle Class') {\r\n              return value.toFixed(2) + ' g/km';\r\n            } else if (title === 'Consumption by Transmission' || title.includes('Consumption')) {\r\n              return value.toFixed(2) + ' L/100km';\r\n            } else {\r\n              return value;\r\n            }\r\n          }\r\n        }\r\n      },\r\n    } : {},\r\n  };\r\n\r\n  const renderChart = () => {\r\n    try {\r\n      switch (type) {\r\n        case 'bar':\r\n          return <Bar data={chartData} options={options} />;\r\n        case 'line':\r\n          return <Line data={chartData} options={options} />;\r\n        case 'pie':\r\n          return <Pie data={chartData} options={options} />;\r\n        default:\r\n          return <Bar data={chartData} options={options} />;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error rendering chart:', error);\r\n      return <div>Error rendering chart. Check console for details.</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      {renderChart()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","getColors","count","colors","Array","fill","map","_","i","length","_ref","data","type","title","console","log","concat","isArray","_jsx","children","labels","item","label","values","value","chartData","datasets","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","position","display","text","tooltip","callbacks","context","parsed","y","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","style","format","scales","beginAtZero","ticks","callback","toFixed","includes","className","renderChart","Bar","Line","Pie","error"],"sourceRoot":""}