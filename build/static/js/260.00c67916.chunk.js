"use strict"; (self.webpackChunkdb_frontend = self.webpackChunkdb_frontend || []).push([[260, 895, 640, 98], { 895: (e, t, s) => { s.r(t), s.d(t, { default: () => C }); var a = s(43), n = s(658); const r = "label"; function i(e, t) { "function" === typeof e ? e(t) : e && (e.current = t) } function o(e, t) { e.labels = t } function c(e, t) { let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : r; const a = []; e.datasets = t.map((t => { const n = e.datasets.find((e => e[s] === t[s])); return n && t.data && !a.includes(n) ? (a.push(n), Object.assign(n, t), n) : { ...t } })) } function l(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : r; const s = { labels: [], datasets: [] }; return o(s, e.labels), c(s, e.datasets, t), s } function d(e, t) { const { height: s = 150, width: r = 300, redraw: d = !1, datasetIdKey: h, type: u, data: p, options: g, plugins: f = [], fallbackContent: m, updateMode: C, ...j } = e, x = (0, a.useRef)(null), b = (0, a.useRef)(), v = () => { x.current && (b.current = new n.t1(x.current, { type: u, data: l(p, h), options: g && { ...g }, plugins: f }), i(t, b.current)) }, y = () => { i(t, null), b.current && (b.current.destroy(), b.current = null) }; return (0, a.useEffect)((() => { !d && b.current && g && function (e, t) { const s = e.options; s && t && Object.assign(s, t) }(b.current, g) }), [d, g]), (0, a.useEffect)((() => { !d && b.current && o(b.current.config.data, p.labels) }), [d, p.labels]), (0, a.useEffect)((() => { !d && b.current && p.datasets && c(b.current.config.data, p.datasets, h) }), [d, p.datasets]), (0, a.useEffect)((() => { b.current && (d ? (y(), setTimeout(v)) : b.current.update(C)) }), [d, g, p.labels, p.datasets, C]), (0, a.useEffect)((() => { b.current && (y(), setTimeout(v)) }), [u]), (0, a.useEffect)((() => (v(), () => y())), []), a.createElement("canvas", Object.assign({ ref: x, role: "img", height: s, width: r }, j), m) } const h = (0, a.forwardRef)(d); function u(e, t) { return n.t1.register(t), (0, a.forwardRef)(((t, s) => a.createElement(h, Object.assign({}, t, { ref: s, type: e })))) } const p = u("line", n.ZT), g = u("bar", n.A6), f = u("pie", n.P$); var m = s(579); n.t1.register(n.PP, n.kc, n.E8, n.hE, n.m_, n.s$, n.Bs, n.FN, n.No); const C = e => { let { data: t = [], title: s, type: n } = e; if (!t || 0 === t.length) return (0, m.jsx)("div", { children: "No data available for this chart." }); const [r, i] = (0, a.useState)(null), o = { labels: Array.isArray(t) ? t.map((e => e.make || e.vehClass || e.fuelType || e.trans || e.co2Rating || "")) : [], datasets: [{ label: s, data: Array.isArray(t) ? t.map((e => e.avgCons || e.combCons || e.count || e.avgCo2 || e.percentage || 0)) : [], backgroundColor: "rgba(75,192,192,0.6)", borderColor: "rgba(75,192,192,1)", borderWidth: 1, hoverBackgroundColor: "rgba(75,192,192,0.4)", hoverBorderColor: "rgba(75,192,192,1)" }] }, c = { scales: { y: { beginAtZero: !0 } }, onClick: (e, s) => { if (s.length > 0) { const e = s[0].index; i(t[e]) } }, responsive: !0, plugins: { legend: { position: "top" }, title: { display: !0, text: s } } }; let l; switch (n) { case "fuelTypeDist": case "co2RatingPct": l = f; break; case "consByTrans": case "co2ByClass": l = p; break; default: l = g }return (0, m.jsxs)("div", { className: "chart", children: [(0, m.jsx)("h2", { children: s }), (0, m.jsx)(l, { data: o, options: c }), r && (0, m.jsxs)("div", { className: "detail-view", children: [(0, m.jsx)("h3", { children: r.make || r.vehClass || r.fuelType || r.trans || r.co2Rating }), (0, m.jsxs)("p", { children: ["Value: ", r.avgCons || r.combCons || r.count || r.avgCo2 || r.percentage] })] })] }) } }, 98: (e, t, s) => { s.r(t), s.d(t, { default: () => n }); s(43); var a = s(579); const n = e => { let { items: t } = e; return (0, a.jsxs)("div", { className: "comparison-view", children: [(0, a.jsx)("h2", { children: "Comparison" }), (0, a.jsxs)("table", { children: [(0, a.jsx)("thead", { children: (0, a.jsxs)("tr", { children: [(0, a.jsx)("th", { children: "Make" }), (0, a.jsx)("th", { children: "Model" }), (0, a.jsx)("th", { children: "Fuel Consumption" }), (0, a.jsx)("th", { children: "CO2 Emissions" })] }) }), (0, a.jsx)("tbody", { children: t.map(((e, t) => (0, a.jsxs)("tr", { children: [(0, a.jsx)("td", { children: e.make }), (0, a.jsx)("td", { children: e.model }), (0, a.jsx)("td", { children: e.fuelConsumption }), (0, a.jsx)("td", { children: e.co2Emissions })] }, t))) })] })] }) } }, 260: (e, t, s) => { s.r(t), s.d(t, { default: () => h }); var a = s(43), n = s(213), r = s(658), i = s(895), o = s(640), c = s(904), l = s(98), d = s(579); r.t1.register(r.kc, r.Bs); const h = () => { const [e, t] = (0, a.useState)({ avgConsMake: [], topEfficient: [], fuelTypeDist: [], co2ByClass: [], bestSmog: [], consByTrans: [], co2RatingPct: [], topLowCo2: [] }), [s, r] = (0, a.useState)({}), [h, u] = (0, a.useState)("avgConsMake"), [p, g] = (0, a.useState)([]), [f, m] = (0, a.useState)(!0), [C, j] = (0, a.useState)(null); (0, a.useEffect)((() => { x() }), [s]); const x = async () => { m(!0), j(null); try { const e = await n.A.get("/api/data", { params: s }); console.log("Fetched data:", e.data); const a = { avgConsMake: e.data.avgConsMake.map((e => ({ make: e.MAKE, avgCons: e.AVG_CONS }))), topEfficient: e.data.topEfficient.map((e => ({ make: e.MAKE, model: e.MODEL, combCons: e.COMB_CONS }))), fuelTypeDist: e.data.fuelTypeDist.map((e => ({ fuelType: e.FUEL_TYPE, count: e.COUNT_FT }))), co2ByClass: e.data.co2ByClass.map((e => ({ vehClass: e.VEH_CLASS, avgCo2: e.AVG_CO2 }))), bestSmog: e.data.bestSmog.map((e => ({ make: e.MAKE, model: e.MODEL, smogRating: e.SMOG_RATING }))), consByTrans: e.data.consByTrans.map((e => ({ trans: e.TRANS, avgCons: e.AVG_CONS }))), co2RatingPct: e.data.co2RatingPct.map((e => ({ co2Rating: e.CO2_RATING, count: e.COUNT_CR, percentage: e.PERCENTAGE }))), topLowCo2: e.data.topLowCo2.map((e => ({ make: e.MAKE, avgCo2: e.AVG_CO2 }))) }; t(a) } catch (C) { console.error("Error fetching data:", C), j("Failed to fetch data. Please try again later.") } finally { m(!1) } }, b = { avgConsMake: "Average Consumption by Make", co2ByClass: "CO2 Emissions by Vehicle Class", fuelTypeDist: "Fuel Type Distribution", bestSmog: "Best Smog Ratings", consByTrans: "Consumption by Transmission", co2RatingPct: "CO2 Rating Percentages", topLowCo2: "Top Low CO2 Emitters" }; return f ? (0, d.jsx)("div", { children: "Loading..." }) : C ? (0, d.jsxs)("div", { children: ["Error: ", C] }) : (0, d.jsxs)("div", { className: "dashboard", children: [(0, d.jsx)(c.default, { onFilterChange: r }), (0, d.jsx)("select", { onChange: e => u(e.target.value), children: Object.entries(b).map((e => { let [t, s] = e; return (0, d.jsx)("option", { value: t, children: s }, t) })) }), e[h] && e[h].length > 0 ? (0, d.jsx)(i.default, { data: e[h], title: b[h], type: h }) : (0, d.jsx)("div", { children: "No data available for the selected chart." }), (0, d.jsxs)("div", { className: "top-efficient", children: [(0, d.jsx)("h2", { children: "Top Efficient Vehicles" }), e.topEfficient && e.topEfficient.length > 0 ? (0, d.jsx)(o.default, { data: e.topEfficient, onComparisonToggle: e => { g((t => t.includes(e) ? t.filter((t => t !== e)) : [...t, e])) } }) : (0, d.jsx)("p", { className: "no-data-message", children: "No data available for top efficient vehicles." })] }), p.length > 0 && (0, d.jsx)(l.default, { items: p })] }) } }, 640: (e, t, s) => { s.r(t), s.d(t, { default: () => i }); var a = s(43), n = s(579); const r = e => { let { itemsPerPage: t, totalItems: s, paginate: a } = e; const r = []; for (let n = 1; n <= Math.ceil(s / t); n++)r.push(n); return (0, n.jsx)("nav", { children: (0, n.jsx)("ul", { className: "pagination", children: r.map((e => (0, n.jsx)("li", { className: "page-item", children: (0, n.jsx)("a", { onClick: () => a(e), href: "!#", className: "page-link", children: e }) }, e))) }) }) }, i = e => { let { data: t, title: s, onComparisonToggle: i } = e; const [o, c] = (0, a.useState)(1), l = 10 * o, d = l - 10, h = t.slice(d, l); return (0, n.jsxs)("div", { className: "datatable", children: [(0, n.jsx)("h2", { children: s }), (0, n.jsxs)("table", { children: [(0, n.jsx)("thead", { children: (0, n.jsxs)("tr", { children: [(0, n.jsx)("th", { children: "Make" }), (0, n.jsx)("th", { children: "Model" }), (0, n.jsx)("th", { children: "Combined Consumption" }), (0, n.jsx)("th", { children: "CO2 Emissions" }), (0, n.jsx)("th", { children: "Compare" })] }) }), (0, n.jsx)("tbody", { children: Array.isArray(h) && h.map(((e, t) => (0, n.jsxs)("tr", { children: [(0, n.jsx)("td", { children: e.make || "" }), (0, n.jsx)("td", { children: e.model || "" }), (0, n.jsx)("td", { children: e.combined_consumption || "" }), (0, n.jsx)("td", { children: e.co2_emissions || "" }), (0, n.jsx)("td", { children: (0, n.jsx)("input", { type: "checkbox", onChange: () => i(e) }) })] }, t))) })] }), (0, n.jsx)(r, { itemsPerPage: 10, totalItems: t.length, paginate: e => c(e) })] }) } } }]);
//# sourceMappingURL=260.00c67916.chunk.js.map