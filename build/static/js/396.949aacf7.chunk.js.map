{"version":3,"file":"static/js/396.949aacf7.chunk.js","mappings":"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","sources":["AnalysisResults.js","../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx","Chart.js"],"sourcesContent":["import React from 'react';\r\nimport Chart from './Chart';\r\n\r\nconst AnalysisResults = ({ data }) => {\r\n    const chartTitles = {\r\n        avgConsMake: \"Average Consumption by Make\",\r\n        co2ByClass: \"CO2 Emissions by Vehicle Class\",\r\n        fuelTypeDist: \"Fuel Type Distribution\",\r\n        bestSmog: \"Best Smog Ratings\",\r\n        consByTrans: \"Consumption by Transmission\",\r\n        co2RatingPct: \"CO2 Rating Percentages\",\r\n        topLowCo2: \"Top Low CO2 Emitters\"\r\n    };\r\n\r\n    return (\r\n        <div className=\"analysis-results\">\r\n            <h2>Analysis Results</h2>\r\n            {Object.entries(chartTitles).map(([key, title]) => (\r\n                <Chart key={key} data={data[key]} title={title} type={key} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalysisResults;","import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props as ChartProps;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n","import React, { useState } from 'react';\r\nimport { Bar, Pie, Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, ArcElement, Title, Tooltip, Legend);\r\n\r\nconst Chart = ({ data = [], title, type }) => {\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n    if (!data || data.length === 0) {\r\n        return <div>No data available for this chart.</div>;\r\n    }\r\n\r\n    console.log('Chart data:', data);\r\n    \r\n    const chartData = {\r\n        labels: Array.isArray(data) ? data.map(item => item.make || item.vehClass || item.fuelType || item.trans || item.co2Rating || '') : [],\r\n        datasets: [\r\n          {\r\n            label: title,\r\n            data: Array.isArray(data) ? data.map(item => item.avgCons || item.combCons || item.count || item.avgCo2 || item.percentage || 0) : [],\r\n            backgroundColor: 'rgba(75,192,192,0.6)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: 'rgba(75,192,192,0.4)',\r\n            hoverBorderColor: 'rgba(75,192,192,1)'\r\n          }\r\n        ]\r\n      };\r\n\r\n    const chartOptions = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        },\r\n        onClick: (event, elements) => {\r\n          if (elements.length > 0) {\r\n            const index = elements[0].index;\r\n            setSelectedItem(data[index]);\r\n          }\r\n        },\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: title,\r\n          },\r\n        },\r\n      };\r\n\r\n    let ChartComponent;\r\n    switch(type) {\r\n        case 'fuelTypeDist':\r\n        case 'co2RatingPct':\r\n            ChartComponent = Pie;\r\n            break;\r\n        case 'consByTrans':\r\n        case 'co2ByClass':\r\n            ChartComponent = Line;\r\n            break;\r\n        default:\r\n            ChartComponent = Bar;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"chart\">\r\n        <h2>{title}</h2>\r\n        <ChartComponent data={chartData} options={chartOptions} />\r\n        {selectedItem && (\r\n          <div className=\"detail-view\">\r\n            <h3>{selectedItem.make || selectedItem.vehClass || selectedItem.fuelType || selectedItem.trans || selectedItem.co2Rating}</h3>          \r\n            <p>Value: {selectedItem.avgCons || selectedItem.combCons || selectedItem.count || selectedItem.avgCo2 || selectedItem.percentage}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Chart;"],"names":["_ref","data","_jsxs","className","children","_jsx","Object","entries","avgConsMake","co2ByClass","fuelTypeDist","bestSmog","consByTrans","co2RatingPct","topLowCo2","map","_ref2","key","title","Chart","type","defaultDatasetIdKey","reforwardRef","ref","value","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","arguments","length","addedDatasets","datasets","nextDataset","currentDataset","find","dataset","includes","push","assign","cloneData","nextData","ChartComponent","props","height","width","redraw","options","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","useEffect","chart","nextOptions","setOptions","config","setTimeout","update","React","role","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Pie","PieController","ChartJS","CategoryScale","LinearScale","BarElement","LineElement","ArcElement","Title","Tooltip","Legend","selectedItem","setSelectedItem","useState","console","log","chartData","Array","isArray","item","make","vehClass","fuelType","trans","co2Rating","label","avgCons","combCons","count","avgCo2","percentage","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","chartOptions","scales","y","beginAtZero","onClick","event","elements","index","responsive","legend","position","display","text"],"sourceRoot":""}