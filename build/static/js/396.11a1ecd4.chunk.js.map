{"version":3,"file":"static/js/396.11a1ecd4.chunk.js","mappings":"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","sources":["AnalysisResults.js","Chart.js","DataTable.js"],"sourcesContent":["import React from 'react';\r\nimport Chart from './Chart';\r\nimport DataTable from './DataTable';\r\n\r\nconst AnalysisResults = ({ data, comparisonData }) => {\r\n    const chartConfigs = [\r\n        { key: 'avgConsMake', title: \"Average Consumption\", type: 'line' },\r\n        { key: 'co2ByClass', title: \"CO2 Emissions by Vehicle Class\", type: 'bar' },\r\n        { key: 'fuelTypeDist', title: \"Fuel Type Distribution\", type: 'bar' },\r\n        { key: 'bestSmog', title: \"Best Smog Ratings\", type: 'bar' },\r\n        { key: 'consByTrans', title: \"Consumption by Transmission\", type: 'bar' },\r\n        { key: 'co2RatingPct', title: \"CO2 Rating Percentages\", type: 'pie' },\r\n        { key: 'topLowCo2', title: \"Top Low CO2 Emitters\", type: 'bar' },\r\n        { key: 'topEfficient', title: \"Top Efficient Vehicles\", type: 'line' }\r\n    ];\r\n\r\n    const formatChartData = (rawData, key, isComparison) => {\r\n        if (!rawData || rawData.length === 0) return [];\r\n    \r\n        const config = chartConfigs.find(c => c.key === key);\r\n        if (!config) return [];\r\n    \r\n        if (isComparison) {\r\n            switch (key) {\r\n                case 'avgConsMake':\r\n                    return rawData.map(item => ({\r\n                        label: `${item.MAKE} ${item.MODEL}`,\r\n                        value: item.COMBINED_CONSUMPTION\r\n                    }));\r\n                case 'co2ByClass':\r\n                    return rawData.map(item => ({\r\n                        label: `${item.MAKE} ${item.MODEL}`,\r\n                        value: item.CO2_EMISSIONS\r\n                    }));\r\n                case 'fuelTypeDist':\r\n                    return rawData.map(item => ({\r\n                        label: item.FUEL_TYPE,\r\n                        value: 1 // Count of each fuel type\r\n                    }));\r\n                case 'bestSmog':\r\n                    return rawData.map(item => ({\r\n                        label: `${item.MAKE} ${item.MODEL}`,\r\n                        value: item.SMOG_RATING\r\n                    }));\r\n                case 'consByTrans':\r\n                    return rawData.map(item => ({\r\n                        label: item.TRANSMISSION,\r\n                        value: item.COMBINED_CONSUMPTION\r\n                    }));\r\n                case 'co2RatingPct':\r\n                    return rawData.map(item => ({\r\n                        label: `CO2 Rating ${item.CO2_RATING}`,\r\n                        value: 1 // Count of each CO2 rating\r\n                    }));\r\n                case 'topLowCo2':\r\n                    return rawData.map(item => ({\r\n                        label: `${item.MAKE} ${item.MODEL}`,\r\n                        value: item.CO2_EMISSIONS\r\n                    }));\r\n                case 'topEfficient':\r\n                    return rawData.map(item => ({\r\n                        label: `${item.MAKE} ${item.MODEL}`,\r\n                        value: item.COMBINED_MPG\r\n                    }));\r\n                default:\r\n                    return rawData.map(item => ({\r\n                        label: `${item.MAKE} ${item.MODEL}`,\r\n                        value: item[key.toUpperCase()]\r\n                    }));\r\n            }\r\n        } else {\r\n            // Existing logic for overall analysis data\r\n            return rawData.map(item => {\r\n                const labels = Object.keys(item);\r\n                let labelIndex, valueIndex;\r\n        \r\n                switch (key) {\r\n                    case 'fuelTypeDist':\r\n                    case 'avgConsMake':\r\n                    case 'co2ByClass':\r\n                    case 'consByTrans':\r\n                    case 'topLowCo2':\r\n                        labelIndex = 1;\r\n                        valueIndex = 2;\r\n                        break;\r\n                    case 'bestSmog':\r\n                    case 'topEfficient':\r\n                        labelIndex = 2;\r\n                        valueIndex = 3;\r\n                        break;\r\n                    case 'co2RatingPct':\r\n                        labelIndex = 1;\r\n                        valueIndex = 3;\r\n                        break;\r\n                    default:\r\n                        return null;\r\n                }\r\n        \r\n                return {\r\n                    label: item[labels[labelIndex]],\r\n                    value: parseFloat(item[labels[valueIndex]])\r\n                };\r\n            }).filter(Boolean);\r\n        }\r\n    };\r\n\r\n    if (!data || Object.keys(data).length === 0) {\r\n        return <div>No data available for analysis.</div>;\r\n    }\r\n\r\n    // Check if comparisonData is defined and an array\r\n    const isComparisonDataAvailable = comparisonData && Array.isArray(comparisonData) && comparisonData.length > 0;\r\n\r\n    // console.log('Data:', data);\r\n    // console.log('Comparison Data:', comparisonData);\r\n\r\n    return (\r\n        <div className=\"analysis-results\">\r\n            <h2>{isComparisonDataAvailable ? \"Vehicle Comparison\" : \"Analysis Results\"}</h2>\r\n            {chartConfigs.map(config => {\r\n                const chartData = isComparisonDataAvailable\r\n                    ? formatChartData(comparisonData, config.key, true)\r\n                    : formatChartData(data[config.key], config.key, false);\r\n\r\n                console.log(`Chart Config for ${config.key}:`, chartData);\r\n\r\n                if (chartData.length === 0) {\r\n                    return <div key={config.key}>No data available for {config.title}</div>;\r\n                }\r\n\r\n                return (\r\n                    <div key={config.key} className=\"chart-section\">\r\n                        <h3>{config.title}</h3>\r\n                        <Chart\r\n                            data={chartData}\r\n                            type={config.type}\r\n                            title={config.title}\r\n                        />\r\n                        <DataTable data={chartData} />\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalysisResults;\r\n\r\n","import React from 'react';\r\nimport { Bar, Line, Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst getColors = (count) => {\r\n  const colors = [\r\n    'rgba(75,192,192,0.6)', 'rgba(255,99,132,0.6)', 'rgba(255,206,86,0.6)',\r\n    'rgba(54,162,235,0.6)', 'rgba(153,102,255,0.6)', 'rgba(255,159,64,0.6)'\r\n  ];\r\n  return Array(count).fill().map((_, i) => colors[i % colors.length]);\r\n};\r\n\r\nconst Chart = ({ data, type, title }) => {\r\n  if (!data || !Array.isArray(data) || data.length === 0) {\r\n    return <div>No data available for this chart.</div>;\r\n  }\r\n\r\n  // Enhanced data validation\r\n  const isValidData = data.every(item => item.hasOwnProperty('label') && item.hasOwnProperty('value'));\r\n\r\n  if (!isValidData) {\r\n    return <div>Error: Invalid data format for chart.</div>;\r\n  }\r\n\r\n  const labels = data.map(item => item.label);\r\n  const values = data.map(item => item.value);\r\n\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: title,\r\n        data: values,\r\n        backgroundColor: type === 'pie' ? getColors(values.length) : getColors(1)[0],\r\n        borderColor: type === 'line' ? getColors(1)[0] : 'rgba(75,192,192,1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: title,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => `${context.parsed.y || context.parsed}`,\r\n        },\r\n      },\r\n    },\r\n    scales: type !== 'pie' ? {\r\n      y: {\r\n        beginAtZero: true,\r\n      },\r\n    } : {},\r\n  };\r\n\r\n  const renderChart = () => {\r\n    switch (type) {\r\n      case 'bar':\r\n        return <Bar data={chartData} options={options} />;\r\n      case 'line':\r\n        return <Line data={chartData} options={options} />;\r\n      case 'pie':\r\n        return <Pie data={chartData} options={options} />;\r\n      default:\r\n        return <Bar data={chartData} options={options} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      {renderChart()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\n\r\nconst DataTable = ({ data, onComparisonToggle }) => {\r\n    if (!data || data.length === 0) {\r\n        return <p className=\"no-data-message\">No data available.</p>;\r\n    }\r\n\r\n    const headers = Object.keys(data[0]);\r\n\r\n    return (\r\n        <div className=\"table-container\">\r\n            <table className=\"data-table\">\r\n                <thead>\r\n                    <tr>\r\n                        {headers.map(header => (\r\n                            <th key={header}>{header}</th>\r\n                        ))}\r\n                        <th>Compare</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.map((row, index) => (\r\n                        <tr key={index}>\r\n                            {headers.map(header => (\r\n                                <td key={header}>{row[header]}</td>\r\n                            ))}\r\n                            <td>\r\n                                <button onClick={() => onComparisonToggle(row)}>\r\n                                    Compare\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataTable;"],"names":["_ref","data","comparisonData","chartConfigs","key","title","type","formatChartData","rawData","isComparison","length","find","c","map","item","labels","Object","keys","labelIndex","valueIndex","label","value","parseFloat","filter","Boolean","concat","MAKE","MODEL","COMBINED_CONSUMPTION","CO2_EMISSIONS","FUEL_TYPE","SMOG_RATING","TRANSMISSION","CO2_RATING","COMBINED_MPG","toUpperCase","_jsx","children","isComparisonDataAvailable","Array","isArray","_jsxs","className","config","chartData","console","log","Chart","DataTable","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","getColors","count","colors","fill","_","i","every","hasOwnProperty","values","datasets","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","position","display","text","tooltip","callbacks","context","parsed","y","scales","beginAtZero","renderChart","Bar","Line","Pie","onComparisonToggle","headers","header","row","index","onClick"],"sourceRoot":""}