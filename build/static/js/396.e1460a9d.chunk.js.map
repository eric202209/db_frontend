{"version":3,"file":"static/js/396.e1460a9d.chunk.js","mappings":"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","sources":["AnalysisResults.js","../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx","Chart.js","DataTable.js"],"sourcesContent":["import React from 'react';\r\nimport Chart from './Chart';\r\nimport DataTable from './DataTable';\r\n\r\nconst AnalysisResults = ({ data }) => {\r\n    const chartConfigs = [\r\n        { key: 'avgConsMake', title: \"Avg Consumption by Make Year\", type: 'line' },\r\n        { key: 'co2ByClass', title: \"CO2 Emissions by Vehicle Class\", type: 'bar' },\r\n        { key: 'fuelTypeDist', title: \"Fuel Type Distribution\", type: 'pie' },\r\n        { key: 'bestSmog', title: \"Best Smog Ratings\", type: 'bar' },\r\n        { key: 'consByTrans', title: \"Consumption by Transmission\", type: 'bar' },\r\n        { key: 'co2RatingPct', title: \"CO2 Rating Percentages\", type: 'pie' },\r\n        { key: 'topLowCo2', title: \"Top Low CO2 Emitters\", type: 'bar' },\r\n        { key: 'topEfficient', title: \"Top Efficient Vehicles\", type: 'bar' }\r\n    ];\r\n\r\n    const formatChartData = (rawData, key) => {\r\n        if (!rawData || rawData.length === 0) return [];\r\n        \r\n        let formattedData = rawData.map(item => ({\r\n            label: item[Object.keys(item)[0]],\r\n            value: parseFloat(item[Object.keys(item)[1]])\r\n        }));\r\n\r\n        // Sort data from low to high\r\n        formattedData.sort((a, b) => a.value - b.value);\r\n\r\n        return formattedData;\r\n    };\r\n\r\n    return (\r\n        <div className=\"analysis-results\">\r\n            <h2>Analysis Results</h2>\r\n            {chartConfigs.map(config => (\r\n                <div key={config.key} className=\"chart-section\">\r\n                    <h3>{config.title}</h3>\r\n                    <Chart \r\n                        data={formatChartData(data[config.key], config.key, config.type)}\r\n                        type={config.type}\r\n                        title={config.title}\r\n                    />\r\n                    <DataTable data={data[config.key]} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalysisResults;","import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props as ChartProps;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n","import React from 'react';\r\nimport { Bar, Line, Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Chart = ({ data, type, title }) => {\r\n  if (!data || data.length === 0) {\r\n    return <div>No data available for this chart.</div>;\r\n  }\r\n\r\n  const labels = data.map(item => item.label);\r\n  const values = data.map(item => item.value);\r\n\r\n  const getColors = (count) => {\r\n    const colors = [\r\n      'rgba(75,192,192,0.6)', 'rgba(255,99,132,0.6)', 'rgba(255,206,86,0.6)',\r\n      'rgba(54,162,235,0.6)', 'rgba(153,102,255,0.6)', 'rgba(255,159,64,0.6)'\r\n    ];\r\n    return Array(count).fill().map((_, i) => colors[i % colors.length]);\r\n  };\r\n\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: title,\r\n        data: values,\r\n        backgroundColor: type === 'pie' ? getColors(values.length) : getColors(1)[0],\r\n        borderColor: type === 'line' ? getColors(1)[0] : 'rgba(75,192,192,1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: title,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => `${context.parsed.y || context.parsed}`,\r\n        },\r\n      },\r\n    },\r\n    scales: type !== 'pie' ? {\r\n      y: {\r\n        beginAtZero: true,\r\n      },\r\n    } : {},\r\n  };\r\n\r\n  const renderChart = () => {\r\n    switch (type) {\r\n      case 'bar':\r\n        return <Bar data={chartData} options={options} />;\r\n      case 'line':\r\n        return <Line data={chartData} options={options} />;\r\n      case 'pie':\r\n        return <Pie data={chartData} options={options} />;\r\n      default:\r\n        return <Bar data={chartData} options={options} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      {renderChart()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React from 'react';\r\n\r\nconst DataTable = ({ data, onComparisonToggle }) => {\r\n    if (!data || data.length === 0) {\r\n        return <p>No data available.</p>;\r\n    }\r\n\r\n    const headers = Object.keys(data[0]);\r\n\r\n    return (\r\n        <table className=\"data-table\">\r\n            <thead>\r\n                <tr>\r\n                    {headers.map(header => (\r\n                        <th key={header}>{header}</th>\r\n                    ))}\r\n                    <th>Compare</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data.map((row, index) => (\r\n                    <tr key={index}>\r\n                        {headers.map(header => (\r\n                            <td key={header}>{row[header]}</td>\r\n                        ))}\r\n                        <td>\r\n                            <button onClick={() => onComparisonToggle(row)}>\r\n                                Compare\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default DataTable;"],"names":["_ref","data","formatChartData","rawData","key","length","formattedData","map","item","label","Object","keys","value","parseFloat","sort","a","b","_jsxs","className","children","_jsx","title","type","config","Chart","DataTable","defaultDatasetIdKey","reforwardRef","ref","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","arguments","addedDatasets","datasets","nextDataset","currentDataset","find","dataset","includes","push","assign","cloneData","nextData","ChartComponent","props","height","width","redraw","options","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","useEffect","chart","nextOptions","setOptions","setTimeout","update","React","role","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Pie","PieController","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","values","getColors","count","colors","Array","fill","_","i","chartData","backgroundColor","borderColor","borderWidth","responsive","legend","position","display","text","tooltip","callbacks","context","concat","parsed","y","scales","beginAtZero","onComparisonToggle","headers","header","row","index","onClick"],"sourceRoot":""}