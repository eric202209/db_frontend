{"version":3,"file":"static/js/396.d001bc8f.chunk.js","mappings":"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","sources":["AnalysisResults.js","Chart.js","DataTable.js"],"sourcesContent":["import React from 'react';\r\nimport Chart from './Chart';\r\nimport DataTable from './DataTable';\r\n\r\nconst AnalysisResults = ({ data }) => {\r\n    const chartConfigs = [\r\n        { key: 'avgConsMake', title: \"Average Consumption\", type: 'line' },\r\n        { key: 'co2ByClass', title: \"CO2 Emissions by Vehicle Class\", type: 'bar' },\r\n        { key: 'fuelTypeDist', title: \"Fuel Type Distribution\", type: 'bar' },\r\n        { key: 'bestSmog', title: \"Best Smog Ratings\", type: 'bar' },\r\n        { key: 'consByTrans', title: \"Consumption by Transmission\", type: 'bar' },\r\n        { key: 'co2RatingPct', title: \"CO2 Rating Percentages\", type: 'pie' },\r\n        { key: 'topLowCo2', title: \"Top Low CO2 Emitters\", type: 'bar' },\r\n        { key: 'topEfficient', title: \"Top Efficient Vehicles\", type: 'line' }\r\n    ];\r\n\r\n    // Function to format raw data based on chart type\r\n    const formatChartData = (rawData, key) => {\r\n        if (!rawData || rawData.length === 0) return [];\r\n    \r\n        const config = chartConfigs.find(c => c.key === key);\r\n        if (!config) return [];\r\n    \r\n        // Map raw data to formatted data based on key\r\n        const formattedData = rawData.map(item => {\r\n            const labels = Object.keys(item);\r\n            let labelIndex, valueIndex;\r\n    \r\n            switch (key) {\r\n                case 'fuelTypeDist':\r\n                case 'avgConsMake':\r\n                case 'co2ByClass':\r\n                case 'consByTrans':\r\n                case 'topLowCo2':\r\n                    labelIndex = 1;\r\n                    valueIndex = 2;\r\n                    break;\r\n                case 'bestSmog':\r\n                case 'topEfficient':\r\n                    labelIndex = 2;\r\n                    valueIndex = 3;\r\n                    break;\r\n                case 'co2RatingPct':\r\n                    labelIndex = 1;\r\n                    valueIndex = 3;\r\n                    break;\r\n                default:\r\n                    return null;\r\n            }\r\n    \r\n            return {\r\n                label: item[labels[labelIndex]],\r\n                value: parseFloat(item[labels[valueIndex]])\r\n            };\r\n        }).filter(Boolean); // Remove any null values\r\n        \r\n        // Sort data from low to high\r\n        formattedData.sort((a, b) => a.value - b.value);\r\n    \r\n        return formattedData;\r\n    };\r\n\r\n    return (\r\n        <div className=\"analysis-results\">\r\n            <h2>Analysis Results</h2>\r\n            {chartConfigs.map(config => (\r\n                <div key={config.key} className=\"chart-section\">\r\n                    <h3>{config.title}</h3>\r\n                    <Chart \r\n                        data={formatChartData(data[config.key], config.key)}\r\n                        type={config.type}\r\n                        title={config.title}\r\n                    />\r\n                    <DataTable data={data[config.key]} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalysisResults;\r\n","import React from 'react';\r\nimport { Bar, Line, Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst getColors = (count) => {\r\n  const colors = [\r\n    'rgba(75,192,192,0.6)', 'rgba(255,99,132,0.6)', 'rgba(255,206,86,0.6)',\r\n    'rgba(54,162,235,0.6)', 'rgba(153,102,255,0.6)', 'rgba(255,159,64,0.6)'\r\n  ];\r\n  return Array(count).fill().map((_, i) => colors[i % colors.length]);\r\n};\r\n\r\nconst Chart = ({ data, type, title }) => {\r\n  if (!data || !Array.isArray(data) || data.length === 0) {\r\n    return <div>No data available for this chart.</div>;\r\n  }\r\n\r\n  // Enhanced data validation\r\n  const isValidData = data.every(item => item.hasOwnProperty('label') && item.hasOwnProperty('value'));\r\n\r\n  if (!isValidData) {\r\n    return <div>Error: Invalid data format for chart.</div>;\r\n  }\r\n\r\n  const labels = data.map(item => item.label);\r\n  const values = data.map(item => item.value);\r\n\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: title,\r\n        data: values,\r\n        backgroundColor: type === 'pie' ? getColors(values.length) : getColors(1)[0],\r\n        borderColor: type === 'line' ? getColors(1)[0] : 'rgba(75,192,192,1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: title,\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) => `${context.parsed.y || context.parsed}`,\r\n        },\r\n      },\r\n    },\r\n    scales: type !== 'pie' ? {\r\n      y: {\r\n        beginAtZero: true,\r\n      },\r\n    } : {},\r\n  };\r\n\r\n  const renderChart = () => {\r\n    switch (type) {\r\n      case 'bar':\r\n        return <Bar data={chartData} options={options} />;\r\n      case 'line':\r\n        return <Line data={chartData} options={options} />;\r\n      case 'pie':\r\n        return <Pie data={chartData} options={options} />;\r\n      default:\r\n        return <Bar data={chartData} options={options} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      {renderChart()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\n\r\nconst DataTable = ({ data, onComparisonToggle }) => {\r\n    if (!data || data.length === 0) {\r\n        return <p className=\"no-data-message\">No data available.</p>;\r\n    }\r\n\r\n    const headers = Object.keys(data[0]);\r\n\r\n    return (\r\n        <div className=\"table-container\">\r\n            <table className=\"data-table\">\r\n                <thead>\r\n                    <tr>\r\n                        {headers.map(header => (\r\n                            <th key={header}>{header}</th>\r\n                        ))}\r\n                        <th>Compare</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.map((row, index) => (\r\n                        <tr key={index}>\r\n                            {headers.map(header => (\r\n                                <td key={header}>{row[header]}</td>\r\n                            ))}\r\n                            <td>\r\n                                <button onClick={() => onComparisonToggle(row)}>\r\n                                    Compare\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataTable;"],"names":["_ref","data","chartConfigs","key","title","type","formatChartData","rawData","length","find","c","formattedData","map","item","labels","Object","keys","labelIndex","valueIndex","label","value","parseFloat","filter","Boolean","sort","a","b","_jsxs","className","children","_jsx","config","Chart","DataTable","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","getColors","count","colors","Array","fill","_","i","isArray","every","hasOwnProperty","values","chartData","datasets","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","position","display","text","tooltip","callbacks","context","concat","parsed","y","scales","beginAtZero","renderChart","Bar","Line","Pie","onComparisonToggle","headers","header","row","index","onClick"],"sourceRoot":""}